package qiwa.gov.sa.extentions

import android.text.Spannable
import android.text.SpannableString
import android.text.style.ForegroundColorSpan
import java.util.Locale
import java.util.UUID
import java.util.regex.Pattern
import kotlin.random.Random

const val SPACE = " "
const val EMPTY_STRING = ""
const val HTTP_SCHEME = "http://"
const val HTTPS_SCHEME = "https://"

fun getUiDataId(): String = UUID.randomUUID().toString()

fun String.autoGeneratedPassword(length: Int) = (1..8)
    .map { _ -> Random.nextInt(0, this.length) }
    .map(this::get)
    .joinToString("")

fun String?.addNextLine() = this + "\n"

fun String?.emptyIfNull() = this ?: EMPTY_STRING

val String?.default
    get() = emptyIfNull()

fun String?.getOrElse(other: String) = this ?: other

fun String?.default(other: String? = null) = this ?: other.default

val String?.getNonAnalyticalValue: String
    get() = this ?: EventConstants.NON_ANALYTICAL_EMPTY_STRING

fun String?.ifEmpty(other: String? = null): String =
    if (isNullOrEmpty().inverse) this ?: other.default else other.default

val String?.isNullOrEmpty
    get() = isNullOrEmpty()

val String.asTitle
    get() = lowercase().replaceFirstChar { if (it.isLowerCase()) it.titlecase(Locale.getDefault()) else it.toString() }

fun SpannableString.setColorSpan(color: Int, range: IntRange) {
    setSpan(
        ForegroundColorSpan(color),
        range.first,
        range.last + 1,
        Spannable.SPAN_EXCLUSIVE_EXCLUSIVE
    )
}


fun String?.indexRange(other: String): IntRange {
    val startIndex = this?.indexOf(other) ?: 0
    val endIndex = startIndex + (other.length - 1)
    return IntRange(if (startIndex == -1) 0 else startIndex, endIndex)
}

fun String?.validateFromRegex(regex: String): Boolean =
    Pattern.compile(regex).matcher(toString()).matches()

object EventConstants {
    const val NON_ANALYTICAL_INTEGER = Int.MIN_VALUE
    const val NON_ANALYTICAL_FLOAT = Float.MIN_VALUE
    const val NON_ANALYTICAL_DOUBLE = Double.MIN_VALUE
    const val NON_ANALYTICAL_LONG = Long.MIN_VALUE
    const val NON_ANALYTICAL_EMPTY_STRING = "NON_ANALYTICAL_EMPTY_STRING"
}